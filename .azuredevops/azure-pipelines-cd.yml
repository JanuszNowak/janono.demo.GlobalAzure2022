variables:
  system.debug: true
  env: dev
  rg: ${{ parameters.applicationName }}-$(env)-global-rg
  locationRG: "westeurope"
  # name: locationMatrix
  # value: 'use2','usw','usnc','ussc'  
  locationMatrix2: "{'use2':{'location':'use2'},'usw':{'location':'usw'},'usnc' :{'location':'usnc'},'ussc':{'location':'ussc'}}"

parameters:
- name: applicationName
  type: string
  default: ga2022
- name: build_ci
  type: string
  default: GlobalAzure2022-ci
- name: destroy
  type: boolean
  default: false

trigger:
- none

resources:
  pipelines:
  - pipeline: GlobalAzure2022-ci
    source: GlobalAzure2022-ci
    trigger:
      branches:
      - release/*
      - master
      - develop

pool:
  vmImage: ubuntu-latest

stages:
- stage: provisioning
  jobs:
  - job: provisioning_job
    steps:
    - download: ${{ parameters.build_ci }}
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: pscore
        scriptLocation: 'inlineScript'
        inlineScript: >
          az upgrade
          az bicep upgrade
          az --version
          az group create --name $(rg) --location $(locationRG)
          az deployment group create
          --resource-group $(rg)
          --template-file '$(Pipeline.Workspace)/${{ parameters.build_ci }}/drop bicep/main.bicep'
          --parameters '$(Pipeline.Workspace)/${{ parameters.build_ci }}/drop bicep/main.$(env).parameters.json'
    # - task: AzureResourceGroupDeployment@2
    #   displayName: Azure Deployment:Create Or Update Resource Group action on $(rg)
    #   inputs:
    #     azureSubscription: AzureServiceConnection
    #     resourceGroupName: $(rg)
    #     location: West Europe
    #     csmFile: $(Pipeline.Workspace)/${{ parameters.build_ci }}/drop arm/azuredeploy.json
    #     csmParametersFile: $(Pipeline.Workspace)/${{ parameters.build_ci }}/drop arm/azuredeploy.parameters.json
    #     overrideParameters: -applicationName ${{ parameters.applicationName }} -environmentType $(env)
    # - task: AzurePowerShell@5
    #   displayName: 'Azure PowerShell script: InlineScript'
    #   inputs:
    #     azureSubscription: AzureServiceConnection
    #     ScriptType: InlineScript
    #     Inline: |
    #       Write-Host $(rg)
    #       $resourceGroupName = "$(rg)"
    #       $webSites=Get-AzWebApp -ResourceGroupName $resourceGroupName
    #       $TmProfile = get-AzTrafficManagerProfile -ResourceGroupName $resourceGroupName
    #       foreach($web in $webSites)
    #       {
    #           if($TmProfile.Endpoints.Count -eq 0)
    #           {
    #               Write-Output "Adding 1 endpoint"
    #               Add-AzTrafficManagerEndpointConfig -EndpointName $web.Name -TrafficManagerProfile $TmProfile -Type AzureEndpoints -Target $web.HostNames[0] -EndpointLocation $web.Location -EndpointStatus Enabled -TargetResourceId $web.Id
    #           }
    #           else
    #           {
    #               if(($TmProfile.Endpoints -ne $null) -and ($TmProfile.Endpoints.Name.Contains($web.Name) -eq $false))
    #               {
    #                   Write-Output "Adding next endpoint"
    #                   Add-AzTrafficManagerEndpointConfig -EndpointName $web.Name -TrafficManagerProfile $TmProfile -Type AzureEndpoints -Target $web.HostNames[0] -EndpointLocation $web.Location -EndpointStatus Enabled -TargetResourceId $web.Id
    #               }
    #           }
    #       }
    #       Set-AzTrafficManagerProfile -TrafficManagerProfile $TmProfile
    #     azurePowerShellVersion: LatestVersion
    #     pwsh: true


- stage: AppDeploy
  jobs:
  - job: AppDeploy_jobYY
    steps:
    - download: ${{ parameters.build_ci }}
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $json=Get-Content -Raw -Path '$(Pipeline.Workspace)/${{ parameters.build_ci }}/drop bicep/main.dev.parameters.json'| Out-String | ConvertFrom-Json
          $foo="instName"
          $line=$json.parameters.psobject.properties.Where({$_.name -eq $foo}).value

              $i=0;
          $output="{";
                  foreach($a in $line.value)
                  {
                      $output+="'$a':{'$foo':'$a'}"
                      $i++
                      if($i -lt $line.value.Length)
                      {
                          $output+=","
                          }
                      }
                  $output+="}"
          $output
          echo "##vso[task.setvariable variable=locationMatrix3;isOutput=true;]$output"
  - job: AppDeploy_job
    dependsOn: AppDeploy_jobYY
    variables:
      locationMatrix3: $[ dependencies.AppDeploy_jobYY.outputs['setvarStep.locationMatrix3'] ]
    strategy:
      matrix: $(locationMatrix3)
      #matrix: $[ variables.locationMatrix2 ]
        # euw:
        #   location: euw
        # use2:
        #   location: use2
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Write-Host $(locationMatrix3)
          Write-Host $(instName)
        pwsh: true
    - download: ${{ parameters.build_ci }}
    - task: AzureFunctionApp@1
      displayName: 'Azure Function App Deploy: ${{ parameters.applicationName }}-$(env)-$(instName)site'
      inputs:
        azureSubscription: AzureServiceConnection
        appType: functionApp
        appName: ${{ parameters.applicationName }}-$(env)-$(instName)site
        package: $(Pipeline.Workspace)/${{ parameters.build_ci }}/drop/*.zip



- ${{ if eq(parameters.destroy, true) }}:
  - stage: Deprovision
    jobs:
    - job: Deprovision_job
      steps:
      - task: AzureResourceGroupDeployment@2
        displayName: Azure Deployment:DeleteRG action on $(rg)
        inputs:
          azureSubscription: AzureServiceConnection
          action: DeleteRG
          resourceGroupName: $(rg)
